[{"categories":["Website"],"content":"Abstract jquery 是一个轻量化的JavaScript代码库，支持多种浏览器，主要特性为支持CSS3的全部选择器，方便选取各种元素，以及对于元素进行css样式定义，以及获取计算的样式 ","date":"2023-09-11","objectID":"/jquery/:0:0","tags":["前端学习","JavaScript"],"title":"Jquery","uri":"/jquery/"},{"categories":["Website"],"content":"选择和创建元素 $(\"\u003c\\/div\u003e\") $(\"#productprice\") 选择(tag)和创建(\u003c/\u003e)元素，产出的是类数组的DOM集合 创建多个标签 ","date":"2023-09-11","objectID":"/jquery/:0:1","tags":["前端学习","JavaScript"],"title":"Jquery","uri":"/jquery/"},{"categories":["Website"],"content":"jquery对象和DOM元素对象 jquery对象是一个类数组对象，取第一个[0]是对应的DOM元素 a=createTableNaive() b=$(a) b[0]=a ","date":"2023-09-11","objectID":"/jquery/:0:2","tags":["前端学习","JavaScript"],"title":"Jquery","uri":"/jquery/"},{"categories":["Website"],"content":"append方法 a.appendChild(c) 返回是对象 a.append(c) 返回的是数组对象可以继续加 元素有父元素parentNode removeChild 父元素.append(子元素) appendTo是 子元素.appendTo(父元素) jQuery有一个方法设计规则，就是基本上所有的操作方法都是返回的是左边执行的this对象，但是find chileren方法除外，因为find children方法是在父元素向下寻找子元素集合的方法。 ","date":"2023-09-11","objectID":"/jquery/:0:3","tags":["前端学习","JavaScript"],"title":"Jquery","uri":"/jquery/"},{"categories":["Website"],"content":"区别于js js中：var item_item=$(“item”).value 只能选择id，而不能选择td 通过id取到输入框input，才有value属性；td对象没有value值 ","date":"2023-09-11","objectID":"/jquery/:0:4","tags":["前端学习","JavaScript"],"title":"Jquery","uri":"/jquery/"},{"categories":["Website"],"content":"事件处理函数 有一个参数，参数是事件对象，这个事件对象里面有很多信息，比如那个键盘按键被按下，鼠标点击事件触发的位置，以及currentTarget就是处理当前事件的当前对象，target是说引发当前事件的根源对象 // preventDefault会屏蔽事件的默认行为，比如a标签的点击事件，preventDefault会不让标签进行跳转 // stopPropagation 会屏蔽事件的继续传播，不论是在捕获阶段还是在冒泡阶段，都会停止后面的事件传播。但是停止事件传播并不代表屏蔽默认行为。 // mouseover 鼠标移上去 mousemove 鼠标在元素上移动 mouseout 鼠标移出 // click 是单击事件 dblclick是双击事件，但实际上也会先触发两次click单击事件以后，再触发一次双击事件dblclick // mousedown mouseup ","date":"2023-09-11","objectID":"/jquery/:0:5","tags":["前端学习","JavaScript"],"title":"Jquery","uri":"/jquery/"},{"categories":["Website"],"content":"getComputedStyle方法 window.getComputedStyle是获取DOM元素计算后的全部样式信息对象，也是一个类数组对象，数组的内容是所有的样式属性 // 里面的所有的属性名称必须是animation-delay这样比如 // a = window.getComputedStyle(document.getElementById('test1')); console.log(a.animationDelay); console.log(a['animation-delay']); 这两个是等价的 // 同理，jQuery 之所以能够获取当前的背景色，jQuery的写法是$(\"#test1\").css(\"background-color\"); // $(\"tr\")意思是说选定当前页面上所有的tr元素，但是 // $(\"\u003ctr\u003e\") 意思是说创建一个新的空白的tr标签 我现在想要获取到test1元素的背景色是多少，一般来说定义它的背景色可以这么写 //document.getElementById(\"test1\").style.background = \"yellow !important\"; //document.getElementById(\"test1\").style.setProperty(\"background\", \"yellow\", \"important\"); function $A(s){ return document.getElementById(s); } //console.log($A(\"test1\").style.background); //console.log(window.getComputedStyle($A(\"test1\"))[\"background-color\"]); //console.log($(\"#test1\").css(\"background-color\")); //$(\"#test1\").css(); ","date":"2023-09-11","objectID":"/jquery/:0:6","tags":["前端学习","JavaScript"],"title":"Jquery","uri":"/jquery/"},{"categories":["Website"],"content":"cloneNode方法 cloneNode是克隆本节点对象为一个新对象，cloneNode有一个参数，如果不传，就只克隆本元素自己，如果传true就把自己包含所有的子元素都克隆一遍。 ","date":"2023-09-11","objectID":"/jquery/:0:7","tags":["前端学习","JavaScript"],"title":"Jquery","uri":"/jquery/"},{"categories":["Website"],"content":" 浏览器里面的JavaScript分为主要两部分，一部分是JavaScript的核心编程，就是基础语法，函数，string boolean number 关系表达式，运算表达式等 另外一部分是DOM编程，就是宿主对象上面的编程，在网页开发里面，就是对于document对象的编程 DOM document object model CSS里面有选择器和样式表，构成了网页的样式，结合html和css生成了网页页面，通过javascript给页面元素加上了响应逻辑，可以动态的修改页面。 ","date":"2023-09-11","objectID":"/javascript6%E5%AE%9E%E6%88%98/:0:0","tags":["前端学习","JavaScript"],"title":"JavaScript6实战","uri":"/javascript6%E5%AE%9E%E6%88%98/"},{"categories":["Website"],"content":"querySelectorAll方法 var collection = document.querySelectorAll(\"#orderinfo tbody .rowAmount\"); // document下面的querySelectorAll是说按照css的选择器进行选定dom元素的一个方法 ","date":"2023-09-11","objectID":"/javascript6%E5%AE%9E%E6%88%98/:0:1","tags":["前端学习","JavaScript"],"title":"JavaScript6实战","uri":"/javascript6%E5%AE%9E%E6%88%98/"},{"categories":["Website"],"content":"appendChild方法 td_control.appendChild(btn); //[].push 像后面追加 对应的还有prepend就是[].unshift向前追加 ","date":"2023-09-11","objectID":"/javascript6%E5%AE%9E%E6%88%98/:0:2","tags":["前端学习","JavaScript"],"title":"JavaScript6实战","uri":"/javascript6%E5%AE%9E%E6%88%98/"},{"categories":["Website"],"content":"Array slice reverse push pop shift unshift //数组有这些方法 //console.log(a.slice(0)); //console.log(Array.prototype.slice.call(a, 0)); ","date":"2023-09-11","objectID":"/javascript6%E5%AE%9E%E6%88%98/:0:3","tags":["前端学习","JavaScript"],"title":"JavaScript6实战","uri":"/javascript6%E5%AE%9E%E6%88%98/"},{"categories":["Website"],"content":"构造函数 Object.defineProperty set get enumerable 使用prototype原型继承 var val; Object.defineProperty(a, \"xxx\", { set: function(s){ val = s; }, get: function () { return val; } }); a.xxx = 222; a.xxx; for (var x in a) { } ","date":"2023-09-11","objectID":"/javascript6%E5%AE%9E%E6%88%98/:0:4","tags":["前端学习","JavaScript"],"title":"JavaScript6实战","uri":"/javascript6%E5%AE%9E%E6%88%98/"},{"categories":["Website"],"content":"函数的call apply方法 a ={ x:1, y: function(){ console.log(this.x); } } a.y(); function test(a,b,c,d){ console.log(this.x, a,b,c,d); } test.call(a,1,2,3,4); test.apply(a, [1,2,3,4]); ","date":"2023-09-11","objectID":"/javascript6%E5%AE%9E%E6%88%98/:0:5","tags":["前端学习","JavaScript"],"title":"JavaScript6实战","uri":"/javascript6%E5%AE%9E%E6%88%98/"},{"categories":["Website"],"content":"javascript对象 instanceof方法 函数 bind方法实现 以及数组对象使用方法 //test.prototype = new test2(); //var xx = new test(); //console.log(xx instanceof Object); function test2 (){ this.yyy = 1234; } test.prototype = new test2(); var b = new test(); console.log(b instanceof Array); console.log(b.yyy); ","date":"2023-09-11","objectID":"/javascript6%E5%AE%9E%E6%88%98/:0:6","tags":["前端学习","JavaScript"],"title":"JavaScript6实战","uri":"/javascript6%E5%AE%9E%E6%88%98/"},{"categories":["Website"],"content":"bind方法 function bind(func, context) { return function(){ // 在这里无论this是谁，结果都不会变 return func.apply(context, Array.prototype.slice.call(arguments, 0)); } } a= { aa: 1234, bb: function () { console.log(this.aa); } }; a.bb(); var f = a.bb; f(); var g = bind(f, a); g(); var b ={ aa:2222, bb:g, cc:f }; b.bb(); b.cc(); ","date":"2023-09-11","objectID":"/javascript6%E5%AE%9E%E6%88%98/:0:7","tags":["前端学习","JavaScript"],"title":"JavaScript6实战","uri":"/javascript6%E5%AE%9E%E6%88%98/"},{"categories":["Website"],"content":"事件冒泡 dom对象的一个方法，叫做addEventListener，他有三个参数，第一个参数是事件名称，第二个参数是事件处理函数，第三个参数是是否是捕获期间的事件处理函数，如果不是默认是冒泡期间的函数 onload这种方式是通过类似在冒泡阶段进行事件绑定的一种方式，但是如果后面继续使用addEventListener绑定冒泡阶段事件的话，后面的函数执行顺序会排在前面的.onload函数执行顺序的后面 如果.onload被赋值了多次，那么执行顺序还按照第一次onload和addEventListener确定的执行顺序进行执行 onload事件和DOMContentLoaded时间的区别，是DOMContentLoaded事件是dom树完成，onload是dom树完成，并且所有的外部资源img js css都加载完成才会触发。 window.onload = function(){ console.log(\"onload handler 1\"); } // 等价于下面这个 window.addEventListener(\"load\", function(){ console.log(\"onload handler 2\"); }); ","date":"2023-09-11","objectID":"/javascript6%E5%AE%9E%E6%88%98/:0:8","tags":["前端学习","JavaScript"],"title":"JavaScript6实战","uri":"/javascript6%E5%AE%9E%E6%88%98/"},{"categories":["Website"],"content":"闭包函数怎么写（函数内部的函数） document.addEventListener(\"mouseup\", mouseUpHandler); return { cancel: function(){ elem.removeEventListener(\"mousedown\", mouseDownHandler); document.removeEventListener(\"mousemove\", mouseMoveHandler); document.removeEventListener(\"mouseup\", mouseUpHandler); } }; btn.onclick = function(){ $(\"orderinfo\").getElementsByTagName(\"tbody\")[0].removeChild(row); }; return{ getsum:function(){ return amount; } } ","date":"2023-09-11","objectID":"/%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/:0:1","tags":["前端学习","JavaScript"],"title":"闭包函数","uri":"/%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/"},{"categories":["Website"],"content":"闭包函数怎么调用 var draggables = {}; function enableDrag(id){ if (!draggables[id]) { draggables[id] = dragInit($(id)); } } function disableDrag(id) { if (!draggables[id]) { return; } draggables[id].cancel(); delete draggables[id]; } ","date":"2023-09-11","objectID":"/%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/:0:2","tags":["前端学习","JavaScript"],"title":"闭包函数","uri":"/%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/"},{"categories":["Website"],"content":"添加总金额的功能 td_amount.className=\"rowAmount\";//把要加的项加上类名，便于选择 \u003ctfoot\u003e \u003ctd colspan=\"3\"\u003e总金额\u003c/td\u003e \u003ctd colspan=\"2\" id=\"totalAmount\"\u003e0\u003c/td\u003e \u003c/tfoot\u003e //表格加入一行固定的总金额在最后 id是totalAmount function calcDraw(){ var cellection=document.querySelectorAll(\"#item_table tbody .rowAmount\") var amount=0; for(var i= 0;i\u003ccollection.length;i++){ amount+=Number(collection[i].innerHTML); } $(\"totalAmount\").innerHTML=amount; } //修改totalAmount 的值，通过选择器指定类名来累加得到值 ","date":"2023-09-11","objectID":"/%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/:0:3","tags":["前端学习","JavaScript"],"title":"闭包函数","uri":"/%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/"},{"categories":["Website"],"content":"对象 document 方法 getElementById() 变量 var userInfo = document.getElementById(“userInfo”) 函数 function addrow(){} 事件绑定 td4.innerHTML = “删除” a标签绑定了按钮事件 A example var row = document.createElement(“tr”); var td1 = document.createElement(“td”); row.appendChild(td1); tr类型能增加td类型的子元素 申明一个变量；通过一个找/新建id的方法 var userInfo = document.getElementById(“userInfo”); var row = document.createElement(“tr”); 给变量赋值；通过获取id/变量名的值 td_unitprice.innerHTML= $(“productunitprice”).value; 把变量加入父级 row.appendChild(td_id); 表的结构 table有不同的tag：tbody； tbody属于数组，类似于tr； tr标签的对象有appendchild的方法增加td元素。 $(“orderinfo”).getElementsByTagName(“tbody”)[0].appendChild(row[a]); 绑定事件 myButton.onclick = function(){ $(\"orderinfo\").getElementsByTagName(\"tbody\")[0].removeChild(row); }; ","date":"2023-08-18","objectID":"/js%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/:0:0","tags":["前端学习","JavaScript"],"title":"JS对象和方法","uri":"/js%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/"},{"categories":["Website"],"content":"作用域 顶级作用域 \u003e test内部执行期间作用域 \u003e 返回的新函数对象执行期间的作用域(abcd) var abc = 1234; // 顶级作用域 function test(){ // test内部执行期间作用域 var t1 = \"11111111111111\"; var abcd = \"hello world\"; return function (){ // 返回的新函数对象执行期间的作用域 console.log(abcd); console.log(t1); }; } ","date":"2023-08-11","objectID":"/js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/:0:1","tags":["前端学习","JavaScript"],"title":"JS的作用域和构造函数","uri":"/js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"},{"categories":["Website"],"content":"闭包 指定函数的作用域以及函数与其周围状态（变量、函数等）之间的关系。 闭包是指一个函数可以访问其声明时的词法作用域，即使在它被调用的时候，它的外部作用域已经不再存在。 Abstract 封装数据和行为： 通过闭包，可以创建私有变量和函数，只有内部函数能够访问，从而实现数据的封装和隐藏。 模块化编程： 闭包可以帮助创建独立的模块，避免全局命名冲突，同时允许公开只需要暴露的接口。 回调函数和事件处理程序： 在异步编程中，闭包可以用来保存状态和数据，确保在回调函数中访问正确的数据。 实现函数工厂： 通过闭包，可以动态生成具有不同初始值或行为的函数。 ","date":"2023-08-11","objectID":"/js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/:0:2","tags":["前端学习","JavaScript"],"title":"JS的作用域和构造函数","uri":"/js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"},{"categories":["Website"],"content":"JavaScript 简介 JavaScript是一种运行在浏览器中的解释型的编程语言。在Web世界里，只有JavaScript能跨平台、跨浏览器驱动网页，与用户交互。 JavaScript代码放到\u003chead\u003e中 \u003chead\u003e \u003cscript\u003e alert('Hello, world'); \u003c/script\u003e \u003c/head\u003e JavaScript可以对DOM树进行增查删改的操作，对doument对象，方法进行操作。 .getElementbyId() 嵌入式JS \u003cbutton onclick=\" JS code\"\u003e\u003c/button\u003e 完成事件绑定 变量 js里面变量声明规则，变量只能以_或者英文字母开头，后面可以包括数字英文下划线 javascript 里面对象描述是{开头}结尾的，然后是一堆一堆的key value值 key值如果不带引号就按变量声明规则规则处理，如果带引号，只要是合法字符串就可以 var a = { aaa: 1234, 12_34_555_1: \"qqqq\", \"aaa-+bbb\": \"qqqqq\", bbb: \"wwwww\", eee: function() { console.log(this); console.log(this.bbb); console.log(\"---------------------------\"); //console.log(\"12345\"); } a.eee(); 对象的使用一种是.aaa 这种方法只能后面跟合法的变量名 如果是其他的数字类型或者非法变量名但是合法字符串只能[“xxxx”] 函数调用的时候，函数执行上下文对象this看函数.前面的对象就是this的值 Abstract 变量涵盖范围 函数 对象 布尔值 true false 字符串 数字 isNaN（）不是数字就是true ","date":"2023-08-11","objectID":"/js%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/:0:1","tags":["前端学习","JavaScript"],"title":"JS的变量和变量提升","uri":"/js%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"},{"categories":["Website"],"content":"布局相关 margin-top:5px 上边距 a标签的文字居中？ a标签如果是内联元素，内联元素在一个块级元素内部怎么垂直居中：改变父元素行高line-height写成和父元素的高度一样，它内部的内联元素垂直方向上就剧中了。 z-index 在z轴上的层级，数大的排在数小的上面,页面上有很多绝对定位的窗口，都可能互相覆盖，谁在上面，谁在下面，就靠z-index排序. z-index的排序是根据父级走。relative absolute fixed都可以用z-index，默认的static静态定位不能用z-index，static不涉及元素重叠。 \u003cul\u003e和\u003cli\u003e 可以用来写目录\u003cul\u003e相当于一个列表,\u003cli\u003e指定样式。 .submenu_container, .menu_wrapper { padding: 0px; margin: 0px; cursor: pointer; } .menu { float: left; position: relative; width: 20%; height: 64px; line-height: 64px; margin: 0px; padding: 0px; list-style: none; color: #eee; text-align: center; } 样式相关 https://icons.mydrivers.com/2020/www/icon_2020.png 这种图标怎么找到定位？ 怎么实现下拉菜单？ Abstract js js实现，可以实现那种鼠标一放上去不立即显示子菜单，而是延迟0.2 0.3秒显示，因为可能用户是不小心鼠标移上去的 hover伪类实现 下拉菜单是菜单的一个子元素，默认是隐藏的;在鼠标放在菜单上就是hover状态时候才显示出来 注意float和display inline-block不要同时写，inline-block不起作用 代码相关 输入框元件一定要指定name吗，有什么作用？ ","date":"2023-07-28","objectID":"/%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98%E6%B8%85%E5%8D%95/:0:0","tags":["前端学习","HTML"],"title":"前端问题清单","uri":"/%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98%E6%B8%85%E5%8D%95/"},{"categories":["Website"],"content":"float导致的父元素高度塌陷 在文档流中，当父元素的高度设置为自适应的时候（height：auto），此时父元素的高度默认会被子元素撑开。但是当为我们子元素设置浮动（float）以后，子元素就会完全脱离文档流，导致子元素无法撑开父元素高度的情况出现。 流式布局 一种等比例缩放布局方式，在CSS代码中使用百分比来设置宽度，也称百分比自适应的布局。 可以保证当前屏幕分辨率发生改变的时候，页面中的元素大小也可以跟着改变，所以流式布局是移动端开发常用的一种布局。 浮动布局 元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。 一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 浮动元素之后的元素将围绕它。 浮动元素之前的元素将不会受到影响。 如果图像是右浮动，下面的文本流将环绕在它左边： \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"/\u003e \u003ctitle\u003e浮动布局\u003c/title\u003e \u003cstyle type=\"text/css\"\u003e .container{ width: 970px; margin: 0 auto; } .head, .foot{ clear: both; margin: 10px auto; } .middle{ clear: both; margin: 10px auto; } .item-1{ background-color: red; width: 277px; height: 103px; float: left; } .item-2{ background-color:chartreuse; width: 137px; height: 49px; float: right; } .item-3{ background-color:chartreuse; width: 679px; height: 46px; float: right; margin-top: 8px; } .item-4{ background-color:gold; width: 310px; height: 435px; float: left; margin-right: 10px; } .item-5{ background-color:lightblue; width: 450px; height: 240px; float: right; margin-right: 10px; } .item-6{ background-color: lightblue; width: 450px; height: 110px; float: right; margin-top: 10px; margin-right: 10px; } .item-7{ background-color: lightblue; width: 450px; height: 30px; float: right; margin-top: 10px; margin-right: 10px; } .item-8{ background-color: purple; width: 190px; height: 400px; float: right; } .item-9{ background-color: green; width: 650px; height: 25px; float: right; margin-top: 10px; } .item-10{ background-color: blue; width: 970px; height: 35px; } /* 清除浮动 */ .clearfix:after{ content:\"\"; display:block; visibility:hidden; height:0; clear:both; } .clearfix{zoom:1;} \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"container\"\u003e \u003cdiv class=\"head clearfix\"\u003e \u003cdiv class=\"item-1\"\u003e\u003c/div\u003e \u003cdiv class=\"item-2\"\u003e\u003c/div\u003e \u003cdiv class=\"item-3\"\u003e\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"middle clearfix\"\u003e \u003cdiv class=\"item-4\"\u003e\u003c/div\u003e \u003cdiv class=\"item-8\"\u003e\u003c/div\u003e \u003cdiv class=\"item-5\"\u003e\u003c/div\u003e \u003cdiv class=\"item-6\"\u003e\u003c/div\u003e \u003cdiv class=\"item-7\"\u003e\u003c/div\u003e \u003cdiv class=\"item-9\"\u003e\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"foot\"\u003e \u003cdiv class=\"item-10\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e 如何解决父元素塌陷？ 给父元素添加固定高度。 （缺点：添加了固定高度的父元素高度不再自适应） 给父元素添加属性overflow: hidden; 这时父元素就变成bfc block formatting context （缺点：当子元素有定位属性时,容器以外的部分会被裁剪掉) 在子元素的末尾添加一个高度为0的空白 div来清除浮动属性。 （缺点：在页面中添加无意义的div会造成代码冗余） 给父元素中添加一个伪元素 .父元素:after{ content: \"\"; height: 0; clear: both; overflow: hidden; display: block; visibility: hidden; } 当高度塌陷是因为position设置为absolute所导致的时候，上面的四种方法除了第一种把高度写死之外，其它三种方法都是无效的。 解决父元素高度塌陷的通常解决办法是在父元素中开启BFC。当子元素脱离文档流的原因是float，则可以通过开启BFC解决。但是如果子元素脱离文档流是因为absolute或者fixed，则开启BFC同样不管用。 Abstract 内联元素又名行内元素(inline element)，和其对应的是块元素(block element)，都是html规范中的概念。 ","date":"2023-07-27","objectID":"/%E7%88%B6%E5%85%83%E7%B4%A0%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/:0:1","tags":["前端学习","HTML"],"title":"父元素塌陷问题","uri":"/%E7%88%B6%E5%85%83%E7%B4%A0%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/"},{"categories":["Website"],"content":"定义initGame函数 初始化stack的二维数组 根据键盘判断左右移动方向 设置pause变量 调用游戏开始函数 ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:1:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"定义endGame函数 timer ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:2:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"定义runGame函数 if (!currentBlock) { if (stack[3][9]) { endGame(); return; } currentBlock = [4, 10]; redraw(); return; } if (canMove(currentBlock)) { moveDown(currentBlock); } else { stack[currentBlock[0] - 1][currentBlock[1] - 1] = true; currentBlock = null; } checkClear(); redraw(); ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:3:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"定义canMove函数 var can; var max; for (var i = 0; i \u003c stack[currentBlock[0] - 1].length; i++) { if (stack[currentBlock[0] - 1][i]) { max = i + 1; } } if (block[1] - 1 \u003e 0 \u0026\u0026 (block[1] - max \u003e 1 || !max)) { return true; } else { return false; } ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:4:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"定义reDraw函数 ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:5:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"定义makeElement函数 ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:6:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"定义moveDown函数 ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:7:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"定义pressLeft函数 ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:8:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"定义checkClear函数 ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:9:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"定义togglepause函数 ","date":"2023-07-03","objectID":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/:10:0","tags":["前端学习","JS"],"title":"一个俄罗斯方块的js代码","uri":"/%E4%B8%80%E4%B8%AA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97%E7%9A%84js%E4%BB%A3%E7%A0%81/"},{"categories":["Website"],"content":"浮动布局 .aaa { width: 400px; height: 100px; border: 1px solid red; font-size: 32px; text-align: center; line-height: 100px; } // 行高100px 字体居中 .b1 { width: 20px; height: 20px; background: red; display: inline-block; } .www2 .ooo { vertical-align: bottom; line-height: 1; float: left; height: 50px; background: red; border-radius: 10px; } //没有空格 .www .ooo { vertical-align: bottom; line-height: 1; display: inline-block; height: 50px; background: red; border-radius: 10px; } //有空格 border-box content-box ","date":"2023-07-01","objectID":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A04/:0:0","tags":["前端学习","HTML"],"title":"前端学习4","uri":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A04/"},{"categories":["Website"],"content":"1、流式布局 标准文档流，从上到下，从左到右 内联元素 块级元素的内联元素可定位 display：inline-block 行高 ","date":"2023-07-01","objectID":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A03/:0:1","tags":["前端学习","HTML"],"title":"前端学习3","uri":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A03/"},{"categories":["Website"],"content":"2、浮动布局 Relative和absolute两种定位方式 1、 fixed 浮动固定 2、 absolute 绝对于父元素的定位（body） margin：auto margin-left：10px margin-right：10px 3、 relative 相对于自身定位 transform (-50%,-50%) 4、 清除浮动 float: left overflow：hidden 父元素的高度随着子元素的高度变化 ","date":"2023-07-01","objectID":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A03/:0:2","tags":["前端学习","HTML"],"title":"前端学习3","uri":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A03/"},{"categories":["Website"],"content":"3、定位布局 top left bottom .mainContent { width: 800px; margin: 0 auto; } .popModal { position: absolute; width: 800px; height: 400px; top: 50%; left: 50%; /*百分比是相对于父级定位元素相对的宽度进行计算*/ /*margin-left: -10%; margin-top: -10%;*/ transform: translate(-50%, -50%); /*百分比是相对于元素自身宽度进行计算*/ background: green; border-radius: 20px; } \u003cbody\u003e \u003cdiv class=\"mainContent\"\u003e \u003c!-- position定位 relative 相对自身的原始位置进行定位 absolute 相对于最近的带有定位元素样式的父元素进行定位 --\u003e \u003cimg src=\"airplane1.jpg\" /\u003e \u003cdiv class=\"popModal\"\u003e我是一个弹窗\u003c/div\u003e \u003c/div\u003e \u003c/body\u003e ","date":"2023-07-01","objectID":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A03/:0:3","tags":["前端学习","HTML"],"title":"前端学习3","uri":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A03/"},{"categories":["Website"],"content":"单选框 \u003cinput id=\"t1\" type=\"radio\" name=\"gender\" value=\"1\" /\u003e1 \u003cinput id=\"t2\" type=\"radio\" name=\"gender\" value=\"2\" /\u003e2 \u003cinput id=\"t3\" type=\"radio\" name=\"gender\" value=\"3\" checked /\u003e3 \u003cinput id=\"t4\" type=\"radio\" name=\"gender\" value=\"4\" /\u003e4 \u003cinput id=\"t5\" type=\"radio\" name=\"gender\" value=\"5\" /\u003e5 \u003cinput id=\"t6\" type=\"radio\" name=\"gender\" value=\"6\" /\u003e6 多选框 \u003cselect name=\"country\" multiple\u003e \u003coption value=\"China\"\u003eChina\u003c/option\u003e \u003coption value=\"UK\"\u003eUK\u003c/option\u003e \u003coption value=\"Japan\"\u003eJapan\u003c/option\u003e \u003coption value=\"USA\"\u003eUSA\u003c/option\u003e \u003c/select\u003e 输入框 \u003cinput name=\"user_id\" value=\"005\" type=\"text\" /\u003e \u003ctextarea name=\"content\" maxlength=\"10\" placeholder=\"please write content...\" required\u003e \u003c/textarea\u003e 下拉框 \u003cselect name=\"country\" \u003e \u003coption value=\"China\"\u003eChina\u003c/option\u003e \u003coption value=\"UK\"\u003eUK\u003c/option\u003e \u003coption value=\"Japan\"\u003eJapan\u003c/option\u003e \u003coption value=\"USA\"\u003eUSA\u003c/option\u003e \u003c/select\u003e submit按钮 \u003cinput type=\"submit\" value=\"Submit\" /\u003e 有序列表 \u003col\u003e \u003cli\u003evgfb\u003c/li\u003e \u003cli\u003ederrf\u003c/li\u003e \u003cli\u003eyus\u003c/li\u003e \u003c/ol\u003e 无序列表 \u003cstyle\u003e ul{ list-style: none; } ul li{ padding: 20px 10px; //列表项行距 } ul li:hover{ background: aqua; cursor: cell; border-style: solid; //鼠标选中效果 } \u003c/style\u003e \u003cul\u003e \u003cli\u003evgfb\u003c/li\u003e \u003cli\u003ederrf\u003c/li\u003e \u003cli\u003eyus\u003c/li\u003e \u003c/ul\u003e nodeType 属性以数字形式返回指定节点的节点类型。 如果节点是元素节点，则 nodeType 属性将返回 1。 如果节点是属性节点，则 nodeType 属性将返回 2。 如果节点是文本节点，则 nodeType 属性将返回 3。 如果节点是注释节点，则 nodeType 属性将返回 8。 ","date":"2023-07-01","objectID":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A02/:0:0","tags":["前端学习","HTML"],"title":"前端学习2","uri":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A02/"},{"categories":["Website"],"content":"前端学习 HTML标签（1） ","date":"2023-06-28","objectID":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A01/:1:0","tags":["前端学习","HTML"],"title":"前端学习1","uri":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A01/"},{"categories":["Website"],"content":"块级元素 padding 占据空间有background margin 无背景色 \u003ca\u003e\u003c/a\u003e 属性： href 链接页面 target 打开空页面 \u003cimg\u003e\u003c/img\u003e 属性： src 图片路径 width height alt 找不到时显示的文字 style=\"display: block; margin: 0px auto;\" 居中图片 \u003cdiv\u003e\u003c/div\u003e 属性：块级元素 style=\"background: aquamarine;color: blue;width: 800px;margin: 50px auto 100px auto\" 背景色/字体颜色/定位（上右下左） \u003cspan\u003e\u003c/span\u003e 属性：不能单独占据一行 \u003cbr/\u003e 换行 ","date":"2023-06-28","objectID":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A01/:1:1","tags":["前端学习","HTML"],"title":"前端学习1","uri":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A01/"},{"categories":["Website"],"content":"表单 \u003cform\u003e\u003c/form\u003e 方法：默认get，会显示参数到网址 Name：\u003cinput type=\"text\" name=\"attr1\"/\u003e 输入框 \u003cinput type=\"submit\" name=\"Submit-btn\" value=\"submit\"/\u003e 按钮键value赋值 复习题目 1 div有什么特点 和span img a元素有什么区别? 2 想做一个div自动居中要怎么做，原理是什么? 3 如何做一个表单，表单的post提交如何设置? 4 a标记想打开一个新的窗体要如何设置 ","date":"2023-06-28","objectID":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A01/:1:2","tags":["前端学习","HTML"],"title":"前端学习1","uri":"/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A01/"},{"categories":null,"content":"这是我的关于页面。 ","date":"2023-06-27","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":["Website"],"content":"GIT学习与运用 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:0:0","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"设置姓名和邮箱地址 git config --global user.name \"Firstname Lastname\" git config --global user.email \"your_email@example.com\" less ~/.gitconfig #查看设置好的用户配置，更改信息可直接修改文件 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:1:0","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"mac系统下查看和生成ssh key https://www.jianshu.com/p/32b0f8f9ca8e 1.check 是否存在~/.ssh/id_rsa与~/.ssh/id_rsa.pub文件 2.不存在的时候生成ssh -keygen -t rsa -C\"your_email\" # strout： Generating public/private rsa key pair. Enter file in which to save the key (/Users/zhaohuanan/.ssh/id_rsa): # 默认会输出到这个文件夹 /Users/zhaohuanan/.ssh/id_rsa already exists. Overwrite (y/n)? # 我这里覆盖一下，我也没设置密码 # stdout Your identification has been saved in /Users/zhaohuanan/.ssh/id_rsa. Your public key has been saved in /Users/zhaohuanan/.ssh/id_rsa.pub. The key fingerprint is: SHA256:kVZgG0pDKf1DD50nbkZPAmvJXQnH12CS0/rDjjbOJMM hermanzhaozzzz@gmail.com The key's randomart image is: ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:2:0","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"在github储存自己的ssh keys（公开秘钥） id_rsa文件是私有秘钥，id_rsa.pub是公开密钥，在GIthub中添加公开秘钥，就可以用私有秘钥进行认证了。 cat一下上面这个.pub文件，复制内容，打开这个链接的网页上，选择 SSH Keys菜单。 点击 Add SSH Key 之后。在 Title 中输入 适当的密钥名称。Key 部分粘贴 id_rsa.pub 文件里的内容。 完成以上设置后，就可以用手中的私人密钥与 GitHub 进行认证和 通信了。让我们来实际试一试。 ssh -T git@github.com The authenticity of host 'github.com (13.229.188.59)' can't be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no)? 输入yes ￼# 出现这个就成功了 # 如果ssh无响应，可能是knowhosts出问题了，找到~/.ssh/known_hosts 将对应ip的信息删除 Warning: Permanently added 'github.com,13.229.188.59' (RSA) to the list of known hosts. Hi hermanzhaozzzz! You've successfully authenticated, but GitHub does not provide shell access. ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:3:0","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"GitHub中创建仓库 git clone http://github/common.git # 这里要求输入github上设置的公开秘钥的密码。认证成功后， 仓库便会被 clone 至仓库名后的目录中。将想要公开的代码提交至这个仓库再 push 到 GitHub 的仓库中，代码便会被公开。 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:4:0","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"git一些基本操作的深入学习 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:5:0","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"git init 初始化仓库以便对Git进行版本管理 mkdir git-tutorial cd git-tutorial git init 初始化的空仓库 .git目录存储着管理当前目录内容所需的仓库数据。在git中将这个目录的内容称为“附属于该仓库的工作树”。 文件的编辑等操作在工作树中进行，然后记录到仓库中，以此管理文件的历史快照。如果想将文件恢复到原先的状态，可以从仓库中调取之前的快照，在工作树中打开。开发者可以通过这种方式获取以往的文件。 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:5:1","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"git add git add README.md #将文件加入暂存区，git发生了变化，显示在changes to be committed中了。 git status ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:5:2","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"git commit 暂存区的文件实际保存在仓库的历史记录中，通过记录可以在工作树中复原文件。 git commit -m \"First commit\"[] First commit ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:5:3","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"git remote add origin http://…. 如果已经连接了远程github就不需要这一步 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:5:4","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"git push -u origin master 推送到原始master上 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:5:5","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"在Github上部署个人blog ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:6:0","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"安装node.js Hexo基于Node.js,下载地址下载安装包包含环境变量和npm的安装，检验Node.js是否安装成功，在命令行中输入node -v node -v npm -v #版本号 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:6:1","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"安装Hexo Hexo是我们个人博客的框架，需要本地有个文件夹保存发布的网页和Hexo框架，创建后进入命令行 npm install -g hexo-cli #这一步可能会很慢，可以尝试下载cnpm优化不少 hexo init blog #初始化 hexo new test_my_site hexo g hexo s #检测网站雏形，在浏览器输入地址localhost：4000在线预览 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:6:2","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"其他命令 npm install hexo -g #安装Hexo npm update hexo -g #升级 hexo init #初始化 hexo s #启动服务器预览**hexo sever** hexo d #部署**hexo deploy** hexo server #Hexo会监视文件变动并自动更新，无须重启服务器 hexo server -s #静态模式 hexo server -p 5000 #更改端口 hexo server -i 192.168.1.1 #自定义 IP hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:6:3","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"推送网站 diagraph G{ 开始-\u003eA A-\u003eB B-\u003eD B-\u003eC C-\u003e结束 } 进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件 下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为： deploy: type: git repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git npm install hexo-deployer-git --save hexo clean hexo g hexo d 此时博客已经上线了可以在网络上被访问了，注意一个github账号仅能申请一个一级账号Github Page。 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:6:4","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"更改主题 如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：Themes 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入： git clone https://github.com/iissnan/hexo-theme-next themes/next 这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开站点的_config.yml配置文件，修改主题为next。 打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings。 next主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:6:5","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"发布文章 hexo n \"博客名字\" 我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 博客名字.md 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了。 通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:6:6","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"寻找图床 图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，! [ 图片信息 ] (外部链接) 完成图片的插入，这种网站就被成为图床。 推荐新浪微博和七牛云 ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细. ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:6:7","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Website"],"content":"个性化设置 设置背景 设置侧边栏 ","date":"2020-06-18","objectID":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/:6:8","tags":["Hexo","Git"],"title":"Hexo开发与Git学习","uri":"/hexohexo%E5%BC%80%E5%8F%91%E4%B8%8Egit%E5%AD%A6%E4%B9%A0/"},{"categories":["Structure Biology","Documentation"],"content":"M3R的结构特征/功能作用/G蛋白偶联特异性的决定 Receptor 药用靶标 G protein M1 神经系统疾病（如阿尔茨海默病和精神分裂症）/学习、记忆和认知 Gq/11 M2 调节人体心率和许多中枢神经系统功能 Gi/o M3 激活后受体磷酸化，募集b抑制蛋白能力受损 / 糖耐量受损伴随着M3受体介导的胰岛胰岛素释放降低 Gq/11 M4 神经系统疾病（如阿尔茨海默病和精神分裂症） /学习、记忆和认知 Gi/o ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:1:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"SAR, structure–activity relationship (Q)SAR 也是模型或数学关系（通常是统计相关性），它将与结构相关的特性与另一个感兴趣的特性或活动的存在或不存在或效力相关联。(Q)SAR最基本的数学形式是： 活性 = f（物理化学或结构特性） SARs 模型的开发需要三个组件： 为一组化学品（即因变量）提供活性（通常通过实验测量）的数据集。这组化学品通常由一些选择标准定义。因变量通常是可监测活性。 同一组化学品的结构标准或与结构相关的特性数据集（即自变量）。自变量通常是结构属性。 关联这两个数据数组的方法（通常是统计分析方法）。将结构与活动联系起来的方法范围从简单的线性回归，到更复杂的方法（例如偏最小二乘分析），再到最复杂的机器学习技术（例如神经网络）。 2018- Structure-guided development of selective M3 muscarinic acetylcholine receptor antagonists ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:2:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"比较M2R和M3R的正构结合位点 M3R的Tiotropium会识别非保守残基亮氨酸，M2R的QNB识别非保守残基苯丙氨酸。compound c的docking pose表明一个扩大的向上环可以越过M2R的非保守苯丙氨酸。 ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:3:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"Structure-based ligand design up-righting and rotation of ring B steric interactions with Phe181 for compound 6b 键的迁移 构象的限制 卤化 这篇文章找到了一个cmpd 6o（BS46），在小鼠体内验证了可以降低心率和降低气道阻力的功能。解了M3R与选择性拮抗剂6o (BS46) 复合的晶体结构。M3R的ICL3的细胞内环替换成mT4L。而在M2R中因为Phe181的空间阻碍而不能与6o结合。从而实现在比M2R选择性提高100倍，在体内有1000倍的选择性的效果。6o是根据M2R的拮抗剂QNB来设计的。 2012- Structure and dynamics of the M3 muscarinic acetylcholine receptor ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:4:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"M3R的主要结构特征 accessible surface for the M3 receptor bound to tiotropium (spheres) shows the receptor covering the ligand with a tyrosine lid (outlined in red). M3 receptor structure coloured by sequence conservation among the five mAChR subtypes. Poorly conserved regions are shown with larger backbone diameter. The orthosteric and allosteric sites are indicated in blue and red elliptical shaded areas, respectively, and the ligand tiotropium is shown as spheres. ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:5:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"ligand结合的动态变化 结合位点附近的 M2 和 M3 受体之间存在 Phe (M2)/Leu (M3) 序列差异。这会在 M3 受体中产生一个扩大的结合袋，用红色勾勒并用箭头表示。M3 Y5297.39 和 D1473.32 的位移(黑色虚线); Y5297.39 的位移可能源于 2.61 位的序列差异（M2 中的 Tyr 80 和 M3 中的 Phe 124）。 ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:6:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"G蛋白偶联特异性的决定条件 Distances were measured between Ca atoms of TM5 residue 5.62 and TM3 residue 3.54 (x-axis), and TM5 residue 5.62 and TM6 residue 6.37 (y-axis). Structural alignment of mammalian Gi/o-coupled and Gq/11-coupled receptor structures. 2017- Structure-based discovery of selective positive allosteric modulators of antagonists for the M2 muscarinic acetylcholine receptor 发现了M2 antagonist的PAM 628分子。 2014- Muscarinic acetylcholine receptors: novel opportunities for drug development 【Feather】 毒蕈碱乙酰胆碱受体是调节中枢和外周神经系统的许多基本功能的 G 蛋白偶联受体亚家族。 ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:7:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"T2D 2 型糖尿病的关键病理生理特征之一是胰腺 β 细胞无法分泌足够的胰岛素来克服外周胰岛素抵抗。 β 细胞 M3 受体促进胰岛素释放的能力取决于 Gq 家族 G 蛋白的存在； M3 receptor-mediated activation of arrestin-dependent β-cell pathways may further enhance insulin secretion； ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:8:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"Modes of targeting mAChRs (GPCRs) by different classes of ligands Orthosteric allosteric achieve greater receptor selectivity and promote more physiological response patterns bitopic target the allosteric site to achieve selectivity and the orthosteric site to provide high affinity. 2013- Activation and allosteric modulation of a muscarinic acetylcholine receptor 用酵母库筛选nanobody的方法找到nanobody9-8，并解析正构结合激动剂iperoxo和nanobody复合物结构。 2019- Structures of the M1 and M2 muscarinic acetylcholine receptor/G-protein complexes 解析了M1R和G11复合物结构，M2R和Go的复合物电镜结构。 2016- Crystal structures of the M1 and M4 muscarinic acetylcholine receptors M1-M4的结构对比 M1-M4正构异构结合位点残基比较 M4R的共建网络 2019- Conformational Complexity and Dynamics in a Muscarinic Receptor Revealed by NMR Spectroscopy M2R结合ligand的动态landscape 2013- Muscarinic Receptors as Model Targets and Antitargets for Structure-Based Ligand Discovery 【Feather】 In the M3 receptor, M2 Phe181 is replaced by a leucine ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:9:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"Docking poses for selected M2 muscarinic receptor hits. ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:10:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"Docking for selective M3 receptor ligands. 一些M2的ligand因为M3R的结合口袋更加亲水，溶剂可及性更好，会表现出对M3更高的亲和力。 ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:11:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"},{"categories":["Structure Biology","Documentation"],"content":"Compound 16 activates M3 but not M2 receptors. ","date":"2020-06-18","objectID":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/:12:0","tags":["Receptor","Experiment"],"title":"M3系列文章概览","uri":"/m3%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%A7%88/"}]