<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JavaScript - Tag - Milky板板の博客</title>
        <link>https://example.com/tags/javascript/</link>
        <description>JavaScript - Tag - Milky板板の博客</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 18 Aug 2023 12:52:57 &#43;0800</lastBuildDate><atom:link href="https://example.com/tags/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>JS对象和方法</title>
    <link>https://example.com/js%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/</link>
    <pubDate>Fri, 18 Aug 2023 12:52:57 &#43;0800</pubDate>
    <author>Milky</author>
    <guid>https://example.com/js%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[对象
document
方法
getElementById()
变量
var userInfo = document.getElementById(&ldquo;userInfo&rdquo;)
函数
function addrow(){}
事件绑定
td4.innerHTML = &ldquo;删除&rdquo;
a标签绑定了按钮事件
A example var row = document.createElement(&ldquo;tr&rdquo;);
var td1 = document.createElement(&ldquo;td&rdquo;);
row.appendChild(td1);
tr类型能增加td类型的子元素
 申明一个变量；通过一个找/新建id的方法
var userInfo = document.getElementById(&ldquo;userInfo&rdquo;);
var row = document.createElement(&ldquo;tr&rdquo;); 给变量赋值；通过获取id/变量名的值
td_unitprice.innerHTML= $(&ldquo;productunitprice&rdquo;).value; 把变量加入父级
row.appendChild(td_id);  表的结构 table有不同的tag：tbody；
tbody属于数组，类似于tr；
tr标签的对象有appendchild的方法增加td元素。
$(&ldquo;orderinfo&rdquo;).getElementsByTagName(&ldquo;tbody&rdquo;)[0].appendChild(row[a]);
绑定事件 1 2 3  myButton.onclick = function(){ $(&#34;orderinfo&#34;).getElementsByTagName(&#34;tbody&#34;)[0].removeChild(row); };   ]]></description>
</item>
<item>
    <title>JS的作用域和构造函数</title>
    <link>https://example.com/js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link>
    <pubDate>Fri, 11 Aug 2023 10:26:28 &#43;0800</pubDate>
    <author>Milky</author>
    <guid>https://example.com/js%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid>
    <description><![CDATA[作用域 顶级作用域 &gt; test内部执行期间作用域 &gt; 返回的新函数对象执行期间的作用域(abcd)
1 2 3 4 5 6 7 8 9 10 11 12 13  var abc = 1234; // 顶级作用域 function test(){ // test内部执行期间作用域 var t1 = &#34;11111111111111&#34;; var abcd = &#34;hello world&#34;; return function (){ // 返回的新函数对象执行期间的作用域 console.log(abcd); console.log(t1); }; }   闭包 指定函数的作用域以及函数与其周围状态（变量、函数等）之间的关系。 闭包是指一个函数可以访问其声明时的词法作用域，即使在它被调用的时候，它的外部作用域已经不再存在。
Abstract  封装数据和行为： 通过闭包，可以创建私有变量和函数，只有内部函数能够访问，从而实现数据的封装和隐藏。 模块化编程： 闭包可以帮助创建独立的模块，避免全局命名冲突，同时允许公开只需要暴露的接口。 回调函数和事件处理程序： 在异步编程中，闭包可以用来保存状态和数据，确保在回调函数中访问正确的数据。 实现函数工厂： 通过闭包，可以动态生成具有不同初始值或行为的函数。   ]]></description>
</item>
<item>
    <title>JS的变量和变量提升</title>
    <link>https://example.com/js%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</link>
    <pubDate>Fri, 11 Aug 2023 10:24:17 &#43;0800</pubDate>
    <author>Milky</author>
    <guid>https://example.com/js%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</guid>
    <description><![CDATA[JavaScript 简介   JavaScript是一种运行在浏览器中的解释型的编程语言。在Web世界里，只有JavaScript能跨平台、跨浏览器驱动网页，与用户交互。
  JavaScript代码放到&lt;head&gt;中
  1 2 3 4 5  &lt;head&gt; &lt;script&gt; alert(&#39;Hello, world&#39;); &lt;/script&gt; &lt;/head&gt;   JavaScript可以对DOM树进行增查删改的操作，对doument对象，方法进行操作。  1  .getElementbyId()   嵌入式JS  1  &lt;button onclick=&#34; JS code&#34;&gt;&lt;/button&gt;   完成事件绑定
变量  js里面变量声明规则，变量只能以_或者英文字母开头，后面可以包括数字英文下划线 javascript 里面对象描述是{开头}结尾的，然后是一堆一堆的key value值 key值如果不带引号就按变量声明规则规则处理，如果带引号，只要是合法字符串就可以  1 2 3 4 5 6 7 8 9 10 11 12  var a = { aaa: 1234, 12_34_555_1: &#34;qqqq&#34;, &#34;aaa-+bbb&#34;: &#34;qqqqq&#34;, bbb: &#34;wwwww&#34;, eee: function() { console.]]></description>
</item>
</channel>
</rss>
